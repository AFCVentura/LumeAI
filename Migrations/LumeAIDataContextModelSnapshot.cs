// <auto-generated />
using System;
using LumeAI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LumeAI.Migrations
{
    [DbContext(typeof(LumeAIDataContext))]
    partial class LumeAIDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LumeAI.Models.Movie.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentroidVectorJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Adult")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("longtext");

                    b.Property<long>("Budget")
                        .HasColumnType("bigint");

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("longtext");

                    b.Property<string>("ImdbId")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Overview")
                        .HasColumnType("longtext");

                    b.Property<float>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Revenue")
                        .HasColumnType("bigint");

                    b.Property<float>("Runtime")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Tagline")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieKeyword", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("MovieKeywords");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompanies");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieProductionCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCountryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCountryId");

                    b.HasIndex("ProductionCountryId");

                    b.ToTable("MovieProductionCountries");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieSpokenLanguage", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("SpokenLanguageId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "SpokenLanguageId");

                    b.HasIndex("SpokenLanguageId");

                    b.ToTable("MovieSpokenLanguages");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.ProductionCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCountries");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.SpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Movie", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Cluster", "Cluster")
                        .WithMany("Movies")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieGenre", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeAI.Models.Movie.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieKeyword", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Keyword", "Keyword")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeAI.Models.Movie.Movie", "Movie")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieProductionCompany", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Movie", "Movie")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeAI.Models.Movie.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieProductionCountry", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Movie", "Movie")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeAI.Models.Movie.ProductionCountry", "ProductionCountry")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("ProductionCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCountry");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.MovieSpokenLanguage", b =>
                {
                    b.HasOne("LumeAI.Models.Movie.Movie", "Movie")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeAI.Models.Movie.SpokenLanguage", "SpokenLanguage")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("SpokenLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("SpokenLanguage");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Cluster", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Keyword", b =>
                {
                    b.Navigation("MovieKeywords");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("MovieKeywords");

                    b.Navigation("MovieProductionCompanies");

                    b.Navigation("MovieProductionCountries");

                    b.Navigation("MovieSpokenLanguages");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.ProductionCountry", b =>
                {
                    b.Navigation("MovieProductionCountries");
                });

            modelBuilder.Entity("LumeAI.Models.Movie.SpokenLanguage", b =>
                {
                    b.Navigation("MovieSpokenLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
